윤성우의 열혈 자료구조 참고함.



스택 성공
시간 제한	메모리 제한	제출	정답	맞힌 사람	정답 비율
0.5 초 (추가 시간 없음)	256 MB	270167	98983	71802	37.620%
문제
정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 다섯 가지이다.

push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
입력
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

예제 입력 1 
14
push 1
push 2
top
size
empty
pop
pop
pop
size
empty
pop
push 3
empty
top
예제 출력 1 
2
2
0
2
1
-1
0
1
-1
0
3
예제 입력 2 
7
pop
top
push 123
top
pop
top
pop
예제 출력 2 
-1
-1
123
123
-1
-1



solution



#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define TRUE	1
#define FALSE	0
#define STACK_LEN	10001
typedef int Data;

typedef struct _arratStack {
	Data stackArr[STACK_LEN];
	int topIndex;
	int size;
}ArrayStack;

typedef ArrayStack Stack;

void StackInit(Stack* pstack) {
	pstack->topIndex = -1;
	pstack->size = 0;
}

int SIsEmpty(Stack* pstack) {
	if (pstack->topIndex += 1)
		return TRUE;
	else
		return FALSE;
}

void SPush(Stack* pstack, Data data) {
	pstack->topIndex += 1;
	pstack->stackArr[pstack->topIndex] = data;
	pstack->size++;
}

Data SPop(Stack* pstack) {
	int rIdx;
	if (pstack->topIndex != -1) {
		rIdx = pstack->topIndex;
		pstack->topIndex--;
		pstack->size--;

		return pstack->stackArr[rIdx];
	}
	else if (pstack->topIndex == -1) {
		return -1;
	}
}

int main() {
	Stack stack;
	StackInit(&stack);

	int n;
	scanf("%d", &n);

	char order[10];
	int temp;

	for (int i = 0; i < n; i++) {
		scanf("%s", order);
		if (strcmp(order, "push") == 0) {
			scanf("%d", &temp);
			SPush(&stack, temp);
		}
		else if (strcmp(order, "pop") == 0) {
			printf("%d\n", SPop(&stack));
		}
		else if (strcmp(order, "size") == 0) {
			printf("%d\n", stack.size);
		}
		else if (strcmp(order, "empty") == 0)
		{
			if (stack.topIndex == -1) printf("1\n");
			else printf("0\n");
		}
		else if (strcmp(order, "top") == 0)
		{
			if (stack.topIndex != -1)
				printf("%d\n", stack.stackArr[stack.topIndex]);
			else printf("%d\n", stack.topIndex);
		}
	}

	return 0;
}
